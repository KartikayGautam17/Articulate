generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts Post[] @relation("Posts")
  likesPosts Like[] @relation("LikedByUser")
  dislikedPosts Dislike[] @relation("DislikedByUser")
  viewedPosts View[] @relation("ViewedByUser")
  likedComments CommentLike[] @relation("CommentLikedByUser")
  dislikedComments CommentDislike[] @relation("CommentDislikedByUser")
  commentedPosts Comment[] @relation("CommentedByUser")
  savedPosts Save[] @relation("SavedByUser")
  following Follows[] @relation("Following")
  followed Follows[] @relation("Followed")
  profile Profile? @relation("UserProfile") 
}

model Post {
  id String @id @default(cuid())
  content String
  title String
  images String[] @default([])
  createdAt DateTime @default(now())
  author User @relation(name: "Posts",fields: [authorId],references: [id],onDelete: Cascade)
  likes Like[]
  Dislikes Dislike[]
  Views View[]
  Comment Comment[]
  savedPosts Save[] @relation("SavedPost")
  authorId String
}

model Like{
  id String @id @default(cuid())
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  user User @relation(name: "LikedByUser",fields: [userId],references: [id])
  createdAt DateTime @default(now())
  postId String
  userId String
  @@unique([postId,userId])
}

model Dislike{
  id String @id @default(cuid())
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  user User @relation(name: "DislikedByUser",fields: [userId],references: [id])
  createdAt DateTime @default(now())
  postId String
  userId String
  @@unique([postId,userId])
}

model View{
  id String @id @default(cuid())
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  user User @relation(name: "ViewedByUser",fields: [userId],references: [id])
  createdAt DateTime @default(now())
  postId String
  userId String
  
}

model Comment{
  id String @id @default(cuid())
  content String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  author User @relation(name: "CommentedByUser",fields: [authorId],references: [id])
  commentLikes CommentLike[]
  commentDislikes CommentDislike[]
  createdAt DateTime @default(now())
  postId String
  authorId String
}

model CommentLike {
  id String @id @default(cuid())
  user User @relation(name: "CommentLikedByUser",fields: [userId],references: [id])
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  userId String  
  commentId String
  @@unique([userId,commentId])
}

model CommentDislike {
  id String @id @default(cuid())
  user User @relation(name: "CommentDislikedByUser",fields: [userId],references: [id])
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  userId String 
  commentId String
  @@unique([userId,commentId])
}

model Save{
  id String @id @default(cuid())
  user User @relation(name: "SavedByUser",fields: [userId],references: [id])
  post Post @relation(name: "SavedPost",fields: [postId],references: [id])
  userId String
  postId String
  createdAt DateTime @default(now())
  @@unique([userId,postId])
}

model Follows {
  id String @id @default(cuid())
  following User @relation(name: "Following",fields: [followingId],references: [id],onDelete: Cascade)
  follower User @relation(name: "Followed",fields: [followerId],references: [id],onDelete: Cascade)
  followingId String
  followerId String
  @@unique([followerId,followingId])  
}

model Profile {
  id String @id @default(cuid())
  name String
  userId String @unique
  description String?
  age Int
  image String?
  tags String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(name: "UserProfile",fields: [userId],references: [id],onDelete: Cascade)
}